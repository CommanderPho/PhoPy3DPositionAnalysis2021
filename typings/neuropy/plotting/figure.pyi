"""
This type stub file was generated by pyright.
"""

from pathlib import Path

class Colormap:
    def dynamicMap(self): # -> ListedColormap:
        ...
    
    def dynamic2(self): # -> ListedColormap:
        ...
    
    def dynamic3(self): # -> ListedColormap:
        ...
    


class Fig:
    labelsize = ...
    def draw(self, num=..., grid=..., size=..., style=..., **kwargs): # -> tuple[Figure, GridSpec]:
        ...
    
    def add_subplot(self, subplot_spec): # -> Axes:
        ...
    
    def subplot2grid(self, subplot_spec, grid=..., **kwargs): # -> GridSpecFromSubplotSpec:
        """Subplots within a subplot

        Parameters
        ----------
        subplot_spec : gridspec of figure
            subplot inside which subplots are created
        grid : tuple, optional
            number of rows and columns for subplots, by default (1, 3)

        Returns
        -------
        gridspec
        """
        ...
    
    def panel_label(self, ax, label, fontsize=...): # -> None:
        ...
    
    def savefig(self, fname: Path, scriptname=..., fig=...): # -> None:
        ...
    
    @staticmethod
    def pf_1D(ax): # -> None:
        ...
    
    @staticmethod
    def remove_spines(ax, sides=...): # -> None:
        ...
    
    @staticmethod
    def set_spines_width(ax, lw=..., sides=...): # -> None:
        ...
    
    @classmethod
    def get_mpl_style(cls, style: str = ...): # -> dict[str, Any]:
        """ Gets the matplotlib rcParams for various formatted styles
        Usage:
            from neuropy.plotting.figure import Fig
            mpl_rcParams_style_dict = Fig.get_mpl_style(style='figPublish')
            mpl.rcParams.update(mpl_rcParams_style_dict)

        with mpl.rc_context(Fig.get_mpl_style(style='figPublish')):
            plt.plot(data)

        @mpl.rc_context(Fig.get_mpl_style(style='figPublish'))
        def plotting_function():
            plt.plot(data)

        """
        ...
    


def pretty_plot(ax, round_ylim=...):
    """Generic function to make plot pretty, bare bones for now, will need updating
    :param round_ylim set to True plots on ticks/labels at 0 and max, rounded to the nearest decimal. default = False
    """
    ...

def debug_print_matplotlib_figure_size(F): # -> tuple[Any, Any]:
    """ Prints the current figure size and DPI for a matplotlib figure F. 
    See https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib 
    Usage:
        SizeInches, DPI = debug_print_matplotlib_figure_size(a_fig)
    """
    ...

def rescale_figure_size(F, scale_multiplier=..., debug_print=...):
    """ Scales up the Matplotlib Figure by a factor of scale_multiplier (in both width and height) without distorting the fonts or line sizes. 
    Usage:
        rescale_figure_size(a_fig, scale_multiplier=2.0, debug_print=True)
    """
    ...

def compute_figure_size_pixels(figure_size_inches): # -> tuple[Any, Any]:
    ...

def compute_figure_size_inches(figure_size_pixels): # -> tuple[Any, Any]:
    """ inverse of compute_figure_size_pixels """
    ...

def neuron_number_title(neurons): # -> list[str]:
    ...

def make_boxes(ax, xdata, ydata, xerror, yerror, facecolor=..., edgecolor=..., alpha=...): # -> Literal[1]:
    ...

