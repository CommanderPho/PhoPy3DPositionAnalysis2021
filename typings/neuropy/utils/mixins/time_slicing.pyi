"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Optional

class StartStopTimesMixin:
    def safe_start_stop_times(self, t_start, t_stop): # -> tuple[Any, Any]:
        """ Returns t_start and t_stop while ensuring the values passed in aren't None.
        Usage:
             t_start, t_stop = self.safe_start_stop_times(t_start, t_stop)
        """
        ...
    


class TimeSlicableIndiciesMixin(StartStopTimesMixin):
    def time_slice_indicies(self, t_start, t_stop):
        ...
    


class TimeSlicableObjectProtocol:
    def time_slice(self, t_start, t_stop):
        """ Implementors return a copy of themselves with each of their members sliced at the specified indicies """
        ...
    


class TimeSlicedMixin:
    """ Used in Pho's more recent Pandas DataFrame-based core classes """
    @property
    def time_variable_name(self):
        ...
    
    def time_sliced(self, t_start=..., t_stop=...):
        """ 
        Implementors have a list of event times that will be used to determine inclusion/exclusion criteria.
        
        returns a copy of the spikes dataframe filtered such that only elements within the time ranges specified by t_start[i]:t_stop[i] (inclusive) are included. """
        ...
    


class TimeColumnAliasesProtocol:
    """ allows time columns to be access by aliases for interoperatability """
    _time_column_name_synonyms = ...
    @classmethod
    def renaming_synonym_columns_if_needed(cls, df: pd.DataFrame, required_columns_synonym_dict: Optional[dict] = ...) -> pd.DataFrame:
        """ if the required columns (as specified in _time_column_name_synonyms's keys are missing, search for synonyms and replace the synonym columns with the preferred column name.

        Usage:
            obj = cls.renaming_synonym_columns_if_needed(obj, required_columns_synonym_dict={"start":{'begin','start_t'}, "stop":['end','stop_t']})

        """
        ...
    


@pd.api.extensions.register_dataframe_accessor("time_slicer")
class TimeSliceAccessor(TimeColumnAliasesProtocol, TimeSlicableObjectProtocol):
    """ Allows general epochs represented as Pandas DataFrames to be easily time-sliced and manipulated along with their accompanying data without making a custom class. """
    def __init__(self, pandas_obj) -> None:
        ...
    
    def time_slice(self, t_start=..., t_stop=...): # -> DataFrame[Any]:
        """ Implementors return a copy of themselves with each of their members sliced at the specified indicies """
        ...
    


def add_epochs_id_identity(spk_df, epochs_df, epoch_id_key_name=..., epoch_label_column_name=..., override_time_variable_name=..., no_interval_fill_value=..., overlap_behavior=...):
    """ Adds the epoch IDs to each spike in spikes_df as a column named epoch_id_key_name
    
    NOTE: you can use this for non-spikes dataframes by providing `override_time_variable_name='t'`

    Example:
        # add the active_epoch's id to each spike in active_spikes_df to make filtering and grouping easier and more efficient:
        
        from neuropy.utils.mixins.time_slicing import add_epochs_id_identity
        
        active_spikes_df = add_epochs_id_identity(active_spikes_df, epochs_df=active_epochs.to_dataframe(), epoch_id_key_name='Probe_Epoch_id', epoch_label_column_name=None, override_time_variable_name='t_rel_seconds', no_interval_fill_value=-1) # uses new add_epochs_id_identity

        # Get all aclus and epoch_idxs used throughout the entire spikes_df:
        all_aclus = active_spikes_df['aclu'].unique()
        all_probe_epoch_ids = active_spikes_df['Probe_Epoch_id'].unique()

        selected_spikes = active_spikes_df.groupby(['Probe_Epoch_id', 'aclu'])[active_spikes_df.spikes.time_variable_name].first() # first spikes
        

        # np.shape(spk_times_arr): (16318817,), p.shape(pbe_start_stop_arr): (10960, 2), p.shape(pbe_identity_label): (10960,)
        spike_pbe_identity_arr # Elapsed Time (seconds) = 90.92654037475586, 93.46184754371643, 90.16610431671143 , 89.04321789741516
    """
    ...

def add_PBE_identity(spk_df, pbe_epoch_df, no_interval_fill_value=..., overlap_behavior=...):
    """ Adds the PBE identity to the spikes_df
    Example:
        # np.shape(spk_times_arr): (16318817,), p.shape(pbe_start_stop_arr): (10960, 2), p.shape(pbe_identity_label): (10960,)
        spike_pbe_identity_arr # Elapsed Time (seconds) = 90.92654037475586, 93.46184754371643, 90.16610431671143 , 89.04321789741516
    """
    ...

