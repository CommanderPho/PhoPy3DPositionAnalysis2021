"""
This type stub file was generated by pyright.
"""

import collections.abc
from typing import Set

class OrderedSet(collections.abc.MutableSet):
    """ a version of `set` that preserves (or at least doesn't arbitrarily sort/change) insertion order. 

    Usage:
        
        from neuropy.utils.mixins.diffable import OrderedSet

    """
    def __init__(self, iterable=...) -> None:
        ...
    
    def add(self, item): # -> None:
        ...
    
    def discard(self, item): # -> None:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __or__(self, other): # -> _NotImplementedType | Self:
        ...
    
    def __and__(self, other): # -> _NotImplementedType | Self:
        ...
    
    def __sub__(self, other): # -> _NotImplementedType | Self:
        ...
    
    def __xor__(self, other): # -> _NotImplementedType | Self:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def isdisjoint(self, other): # -> bool:
        ...
    
    def copy(self): # -> Self:
        ...
    
    def update(self, *others): # -> None:
        ...
    
    def intersection(self, *others): # -> Self:
        ...
    
    def intersection_update(self, *others): # -> None:
        ...
    
    def difference_update(self, *others): # -> None:
        ...
    
    def symmetric_difference_update(self, other): # -> None:
        ...
    


class DiffableObject:
    """ Objects can be "diffed" to other objects of the same type or dictionaries, to see which members are the same and which differ. """
    def diff(self, other_object): # -> Set[Any]:
        ...
    
    @staticmethod
    def compute_diff(lhs_dict, rhs_dict) -> Set:
        """Returns a set of the properties that have changed between the two objects. Objects should be dictionary or related types.

        Args:
            lhs ([type]): [description]
            rhs ([type]): [description]

        Returns:
            [type]: [description]
        """
        ...
    


