"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import Optional
from neuropy.utils.mixins.enum_helpers import ExtendedEnum

class SimplePrintable:
    """ Adds the default print method for classes that displays the class name and its dictionary. """
    def __repr__(self) -> str:
        ...
    


class OrderedMeta(type):
    """ Replaces the inheriting object's dict of attributes with an OrderedDict that preserves enumeration order
    Reference: https://stackoverflow.com/questions/11296010/iterate-through-class-members-in-order-of-their-declaration
    Usage:
        # Set the metaclass property of your custom class to OrderedMeta
        class Person(metaclass=OrderedMeta):
            name = None
            date_of_birth = None
            nationality = None
            gender = None
            address = None
            comment = None
    
        # Can then enumerate members while preserving order
        for member in Person._orderedKeys:
            if not getattr(Person, member):
                print(member)
    """
    @classmethod
    def __prepare__(metacls, name, bases): # -> OrderedDict[Any, Any]:
        ...
    
    def __new__(cls, name, bases, clsdict): # -> Self:
        ...
    


class FileProgressAction(ExtendedEnum):
    """Describes the type of file progress actions that can be performed to get the right verbage.
    Used by `print_file_progress_message(...)`
    """
    LOADING = ...
    SAVING = ...
    GENERIC = ...
    @classmethod
    def init(cls, name=..., value=..., fallback_value=...): # -> ExtendedEnum:
        """ e.g. FileProgressAction.init('lOaDing') # <FileProgressAction.LOADING: 'Loading'> """
        ...
    
    @property
    def actionVerb(self):
        ...
    
    @classmethod
    def actionVerbsList(cls): # -> dict[Any, Any]:
        ...
    


def print_file_progress_message(filepath, action: str, contents_description: str, print_line_ending=..., returns_string=...): # -> str | None:
    """[summary]
        
        print('Saving ripple epochs results to {}...'.format(ripple_epochs.filename), end=' ')
        ripple_epochs.save()
        print('done.')
        
    Args:
        filepath ([type]): [description]
        action (str): [description]
        contents_description (str): [description]
    """
    ...

class ProgressMessagePrinter:
    def __init__(self, filepath, action: str, contents_description: str, print_line_ending=..., finished_message=..., returns_string=...) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, *args): # -> None:
        ...
    


def build_formatted_str_from_properties_dict(dict_items, param_sep_char=..., key_val_sep_char=..., subset_includelist: Optional[list] = ..., subset_excludelist: Optional[list] = ..., float_precision: int = ..., array_items_threshold: int = ...) -> str:
    """ Builds a formatted output string from a dictionary of key:value pairs

    Args:
        dict_items (_type_): the dictionary of items to be built into an output string
        param_sep_char (_type_): the separatior string between each key:value pair in the dictionary
        key_val_sep_char (_type_): the value that separates individual key/value pairs.

    Returns:
        str: _description_
        
    Usage:
        from neuropy.utils.mixins.print_helpers import SimplePrintable, OrderedMeta, build_formatted_str_from_properties_dict
        
        
    """
    ...

class MultiItemStringRepresentationMixin:
    """ enables producing various customizable string representations from a dict-like item. 
    Initially from `neuropy.analyses.placefields.PlacefieldComputationParameters`
    
    Usage:
        from neuropy.utils.mixins.print_helpers import MultiItemStringRepresentationMixin
        
    """
    _decimal_point_character: str = ...
    _param_sep_char: str = ...
    _float_precision: int = ...
    _array_items_threshold: int = ...
    _variable_names: list[str] = ...
    _variable_inline_names: list[str] = ...
    def str_for_filename(self, is_2D) -> str:
        """ returns a string that would be compatible for use in a filename across platforms. 
        This means it can't include any forbidden characters such as: ":", backslash, etc.
        """
        ...
    
    def str_for_display(self, is_2D) -> str:
        """ For rendering in a title, etc """
        ...
    
    def str_for_attributes_list_display(self, param_sep_char=..., key_val_sep_char=..., subset_includelist: Optional[list] = ..., subset_excludelist: Optional[list] = ..., override_float_precision: Optional[int] = ..., override_array_items_threshold: Optional[int] = ...): # -> str:
        """ For rendering in attributes list like outputs
        # Default for attributes lists outputs:
        Example Output:
            speed_thresh	2.0
            grid_bin	[3.777 1.043]
            smooth	[1.5 1.5]
            frate_thresh	0.1
            time_bin_size	0.5
        """
        ...
    


def print_array(a: np.array) -> str:
    """ computes an numpy array with the full separators for use in pasting back into code. """
    ...

