"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Callable, Dict, Optional, Type
from attrs import define
from neuropy.utils.mixins.AttrsClassHelpers import AttrsBasedClassHelperMixin
from neuropy.utils.result_context import IdentifyingContext

@define(slots=False, repr=False)
class HDFSerializationRegister:
    """ 2024-01-10 - A dramatically simplified HDF serialization type handler that avoids all of the hard crap and just allows users to register conversion functions directly for items of different types
	
	a_register = HDFSerializationRegister()

	a_register.converion_registery[pd.DataFrame] = lambda x, *hdf_args, **hdf_kwargs: x.to_hdf(*hdf_args, **hdf_kwargs)
	a_register.converion_registery[Epoch] = lambda x, *hdf_args, **hdf_kwargs: x.to_dataframe().to_hdf(*hdf_args, **hdf_kwargs)


	# works!
	a_register.to_hdf(directional_merged_decoders_result.all_directional_laps_filter_epochs_decoder_result.filter_epochs, 'output/all_directional_laps_filter_epochs_decoder_result-filter_epochs.hdf', 'filter_epochs')


	"""
    converion_registery: Dict[Type, Callable] = ...
    def to_hdf(self, v, *hdf_args, **hdf_kwargs): # -> None:
        ...
    


def post_deserialize(func): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    ...

class HDF_DeserializationMixin(AttrsBasedClassHelperMixin):
    def deserialize(self, *args, **kwargs): # -> None:
        ...
    
    @classmethod
    def read_hdf(cls, file_path, key: str, **kwargs):
        """ Reads the data from the key in the hdf5 file at file_path
        Usage:
            _reread_pos_obj = cls.read_hdf(hdf5_output_path, key='pos')
            _reread_pos_obj
        """
        ...
    


class HDFConvertableEnum:
    """ indicates conformers should be converted to an HDF-enumeration if they are used as a dataframe column. 
    
    TODO: see notes on
    
    NESTED TYPES CAN'T BE PICKED, so I"m moving this out
    
    .apply(lambda x: NeuronType.from_hdf_coding_string(x)).astype(object) #.astype(str) # interestingly this leaves the dtype of this column as 'category' still, but _spikes_df["neuron_type"].to_numpy() returns the correct array of objects... this is better than it started before saving, but not the same. 
    
    """
    @classmethod
    def get_pandas_categories_type(cls) -> Type:
        ...
    
    @classmethod
    def convert_to_hdf(cls, value) -> str:
        ...
    
    @classmethod
    def from_hdf_coding_string(cls, string_value: str) -> HDFConvertableEnum:
        ...
    
    @classmethod
    def convert_dataframe_columns_for_hdf(cls, df: pd.DataFrame) -> pd.DataFrame:
        """ Convert any Enum-typed dataframe columns to the HDF5-compatible categorical type if needed """
        ...
    
    @classmethod
    def restore_hdf_dataframe_column_original_type(cls, df: pd.DataFrame, column_name: str) -> pd.DataFrame:
        """ Restores the original type to the specified column (column_name) in the dataframe after loading from an HDF5 file.
        
        Usage:
            
        """
        ...
    


class HDF_Converter:
    """ holds static functions that convert specific types to an HDF compatible datatype. 

    Created custom `HDF_Converter` to hold static attribute conversions. Might be a little more elogant to register convertable types but they might need to be converted in different ways in different circumstances

    Ideally can have a bunch of types like:
        Path = str(v)

    """
    @classmethod
    def prepare_neuron_indexed_dataframe_for_hdf(cls, neuron_indexed_df: pd.DataFrame, active_context: IdentifyingContext, aclu_column_name: Optional[str] = ...) -> pd.DataFrame:
        """ prepares a neuron-indexed dataframe (one with an entry for each neuron and an aclu column) for export to hdf5 by converting specific columns to the categorical type if needed """
        ...
    
    @classmethod
    def expand_dataframe_session_context_column(cls, non_expanded_context_df: pd.DataFrame, session_uid_column_name: str = ...) -> pd.DataFrame:
        """ expands a column (session_uid_column_name) containing a str representation of the session context (e.g. 'kdiba|gor01|one|2006-6-08_14-26-15') into its four separate component ['format_name', 'animal', 'exper_name', 'session_name'] columns.
        Additionally adds the 'session_datetime' column if it can be parsed from the 'session_name' column.
         """
        ...
    
    @classmethod
    def restore_native_column_types_manual_if_needed(cls, df: pd.DataFrame) -> pd.DataFrame:
        """ 2023-08-24
        Usage:
            restore_native_column_types_manual_if_needed(_out_table)
        """
        ...
    
    @classmethod
    def general_post_load_restore_table_as_needed(cls, df: pd.DataFrame, session_uid_column_name=...) -> pd.DataFrame:
        """ 2023-08-24 should be generally safe to apply on loaded PyTables tables loaded as dataframes.

        Usage:
            _out_table = general_post_load_restore_table_as_needed(_out_table)
        """
        ...
    


_ALLOW_GLOBAL_NESTED_EXPANSION: bool = ...
class HDF_SerializationMixin(AttrsBasedClassHelperMixin):
    """
    Inherits `get_serialized_dataset_fields` from AttrsBasedClassHelperMixin
    """
    @classmethod
    def is_hdf_serializable(cls): # -> Literal[True]:
        """ returns whether the class is completely hdf serializable. """
        ...
    
    def to_hdf(self, file_path, key: str, debug_print=..., enable_hdf_testing_mode: bool = ..., **kwargs): # -> None:
        """ Saves the object to key in the hdf5 file specified by file_path
        enable_hdf_testing_mode: bool - default False - if True, errors are not thrown for the first field that cannot be serialized, and instead all are attempted to see which ones work.
        
    
        Usage:
            hdf5_output_path: Path = curr_active_pipeline.get_output_path().joinpath('test_data.h5')
            _pfnd_obj: PfND = long_one_step_decoder_1D.pf
            _pfnd_obj.to_hdf(hdf5_output_path, key='test_pfnd')
        """
        ...
    


class HDFMixin(HDF_DeserializationMixin, HDF_SerializationMixin):
    ...


