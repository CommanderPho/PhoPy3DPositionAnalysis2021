"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Dict, List, Optional, Union
from nptyping import NDArray

def compute_placefield_center_of_mass_coord_indicies(tuning_curves: NDArray) -> NDArray:
    """ returns the coordinates (index-space, not track-position space) of the center of mass for each of the tuning_curves. """
    ...

def compute_placefield_center_of_mass_positions(tuning_curves: NDArray, xbin: NDArray, ybin: Optional[NDArray] = ...) -> NDArray:
    """ returns the locations of the center of mass for each of the tuning_curves. """
    ...

class ContinuousPeakLocationRepresentingMixin:
    """ Implementors provides peaks in position-space (e.g. a location on the maze) which are computed from a `ContinuousPeakLocationRepresentingMixin_peak_curves_variable` it provides, such as the turning curves.
        
    from neuropy.utils.mixins.peak_location_representing import ContinuousPeakLocationRepresentingMixin
    
    Provides:
        peak_tuning_curve_center_of_mass_bin_coordinates
        peak_tuning_curve_center_of_masses
        
    """
    @property
    def ContinuousPeakLocationRepresentingMixin_peak_curves_variable(self) -> NDArray:
        """ the variable that the peaks are calculated and returned for """
        ...
    
    @property
    def peak_tuning_curve_center_of_mass_bin_coordinates(self) -> NDArray:
        """ returns the coordinates (in bin-index space) of the center of mass of each of the tuning curves."""
        ...
    
    @property
    def peak_tuning_curve_center_of_masses(self) -> NDArray:
        """ returns the locations of the center of mass of each of the tuning curves."""
        ...
    
    def get_tuning_curve_peaks_all_info_dict(self, peak_mode=..., enable_sort_subpeaks_by_peak_heights: bool = ..., **find_peaks_kwargs) -> Dict:
        """ returns the peaks in coordinate bin space 

        peak_mode: str: either ['CoM', 'peaks']
        enable_sort_subpeaks_by_peak_heights: bool = True: if True, the subpeaks returned are sorted by their height
        find_peaks_kwargs: only used if `peak_mode == 'peaks'`

        """
        ...
    
    def get_tuning_curve_peaks_bin_coordinates(self, peak_mode=..., enable_sort_subpeaks_by_peak_heights: bool = ..., **find_peaks_kwargs) -> Union[List, NDArray]:
        """ returns the peaks in coordinate bin space 

        peak_mode: str: either ['CoM', 'peaks']
        enable_sort_subpeaks_by_peak_heights: bool = True: if True, the subpeaks returned are sorted by their height
        find_peaks_kwargs: only used if `peak_mode == 'peaks'`

        """
        ...
    
    def get_tuning_curve_peak_positions(self, peak_mode=..., enable_sort_subpeaks_by_peak_heights: bool = ..., **find_peaks_kwargs) -> Union[List, NDArray]:
        """ returns the peaks in position space. """
        ...
    
    def get_tuning_curve_peak_df(self, peak_mode=..., enable_sort_subpeaks_by_peak_heights: bool = ..., **find_peaks_kwargs) -> pd.DataFrame:
        """ returns a dataframe containing all info about the peaks.
        
        Usage:
        
            peaks_results_df = active_ratemap.get_tuning_curve_peak_df(height=0.2, width=None)
            peaks_results_df['aclu'] = peaks_results_df.series_idx.map(lambda x: active_ratemap.neuron_ids[x]) # Can add in an 'aclu' column like so
            peaks_results_df

        """
        ...
    
    @classmethod
    def peaks_dict_to_df(cls, peaks_dict: Dict, peaks_results_dict: Dict) -> pd.DataFrame:
        ...
    


class PeakLocationRepresentingMixin:
    """ Implementor provides peaks.
    requires: .xbin_centers, .ybin_centers
    requires .tuning_curves
    
    Example:

        from neuropy.utils.mixins.peak_location_representing import PeakLocationRepresentingMixin

        class AClass:		
            ...
            # PeakLocationRepresentingMixin conformances:
            @property
            def PeakLocationRepresentingMixin_peak_curves_variable(self) -> NDArray:
                return self.ratemap.PeakLocationRepresentingMixin_peak_curves_variable
            

    """
    @property
    def PeakLocationRepresentingMixin_peak_curves_variable(self) -> NDArray:
        """ the variable that the peaks are calculated and returned for """
        ...
    
    @property
    def peak_indicies(self) -> NDArray:
        ...
    
    @property
    def peak_locations(self) -> NDArray:
        """ returns the peak locations using self.xbin_centers and self.peak_indicies """
        ...
    


