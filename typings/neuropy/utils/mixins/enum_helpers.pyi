"""
This type stub file was generated by pyright.
"""

from enum import Enum

class StringLiteralComparableEnum(Enum):
    """Enables comparison and equivalence with its literal values. Gets around class reloading issues with autoreloading comparisons failing after types have been updated.
    
    
    Usage:
    
    from neuropy.utils.mixins.enum_helpers import StringLiteralComparableEnum
    
    # Define your custom enum type:
    class UnitColoringMode(StringLiteralComparableEnum):
        PRESERVE_FRAGILE_LINEAR_NEURON_IDXS = "preserve_fragile_linear_neuron_IDXs"
        COLOR_BY_INDEX_ORDER = "color_by_index_order"
        
    test1 = UnitColoringMode.PRESERVE_FRAGILE_LINEAR_NEURON_IDXS
    test2 = UnitColoringMode.COLOR_BY_INDEX_ORDER

    assert isinstance(test1.value, str), f"Value of enum must be string"
    assert test1.value == "preserve_fragile_linear_neuron_IDXs"
    assert test1 != test2
    assert test1 == "preserve_fragile_linear_neuron_IDXs"
    assert test1 == "preserve_fragile_linear_NEURON_IDXs"
    assert test1 != "color_by_index_order" # compare to wrong value
    assert test1 != "a_fake_value" # compare to fake value

    """
    def __hash__(self) -> int:
        """ custom hash function that allows use in dictionary just based off of the value and not the object instance. """
        ...
    
    def __eq__(self, other) -> bool:
        """Overrides the default implementation to allow equality with string literals by value or name """
        ...
    


class ExtendedEnum(Enum):
    """ Allows Inheritors to list their members, values, and names as lists

    MIRRORED from pyphocorehelpers.DataStructure.enum_helpers.ExtendedEnum on 2023-02-01
    Attribution:
        By blueFast answered Feb 28, 2019 at 5:58
        https://stackoverflow.com/a/54919285/9732163

    """
    @classmethod
    def all_members(cls) -> list:
        ...
    
    @classmethod
    def all_member_names(cls) -> list:
        ...
    
    @classmethod
    def all_member_values(cls) -> list:
        ...
    
    @classmethod
    def build_member_value_dict(cls, values_list) -> dict:
        ...
    
    @classmethod
    def init(cls, name=..., value=..., fallback_value=...): # -> Self:
        """ Allows enum values to be initialized from either a name or value (but not both).
            Also allows passthrough of either name or value that are already of the correct type (of Enum type class) and those will just be returned.
                useful for unvalidated parameters

            e.g. FileProgressAction.init('lOaDing') # <FileProgressAction.LOADING: 'Loading'> 
        """
        ...
    


