#!/usr/bin/python
#
from __future__ import division, print_function
from vtkplotter import Plotter, ProgressBar, printc, __version__
from vtkplotter.vtkio import humansort
import sys, argparse

pr = argparse.ArgumentParser(description="version "+str(__version__)+""" -                              
                             check out home page https://github.com/marcomusy/vtkplotter""")
pr.add_argument('files', nargs='*',             help="Input filename(s)")
pr.add_argument("-c", "--color", type=str,      help="mesh color [integer or color name]", default=None, metavar='')
pr.add_argument("-a", "--alpha",    type=float, help="alpha value [0-1]", default=-1, metavar='')
pr.add_argument("-w", "--wireframe",            help="use wireframe representation", action="store_true")
pr.add_argument("-p", "--point-size", type=float, help="specify point size", default=-1, metavar='') 
pr.add_argument("-k", "--show-scalars",         help="use scalars as colors", action="store_true") 
pr.add_argument("-x", "--axes-type", type=int,  help="specify axes type [0-3]", default=1, metavar='')
pr.add_argument("-i", "--no-camera-share",      help="do not share camera in renderers", action="store_true")
pr.add_argument("-l", "--legend-off",           help="do not show legends", action="store_true")
pr.add_argument("-f", "--full-screen",          help="full screen mode", action="store_true")
pr.add_argument("-b", "--background", type=str, help="background color [integer or color name]", default=(1,1,1), metavar='')
pr.add_argument("-z", "--zoom", type=float,     help="zooming factor", default=1.1, metavar='')
pr.add_argument("-q", "--quiet",                help="quiet mode, less verbose", action="store_true")
pr.add_argument("-n", "--sequence-mode",        help="show each file in a separate renderer", action="store_true")
pr.add_argument("-s", "--scrolling-mode",       help="Scrolling Mode: use arrows to scroll files", action="store_true") 
pr.add_argument("-g", "--ray-cast-mode",        help="GPU Ray-casting Mode for SLC/TIFF files", action="store_true") 
pr.add_argument("-gz", "--z-spacing", type=float, help="Volume z-spacing factor [1]", default=None, metavar='') 
pr.add_argument("-gy", "--y-spacing", type=float, help="Volume y-spacing factor [1]", default=None, metavar='') 
args = pr.parse_args()

humansort(args.files)
nfiles = len(args.files)
if nfiles == 0: sys.exit()
title = 'vtkplotter '+__version__

wsize = 'auto'
if args.full_screen: 
    wsize='full'

N = None
if args.sequence_mode: 
    if 1<nfiles<201: 
        N = nfiles
    if nfiles>200: 
        printc("\nWarning: option '-n' allows a maximum of 200 files", c=1)
        printc("         you are trying to load ", nfiles, " files.\n", c=1)
        N = 200
    vp = Plotter(title=title, size=wsize, N=N, bg=args.background)
    vp.axes = 4 #triad
else:
   N = nfiles
   vp = Plotter(title=title, size=wsize, bg=args.background)
   vp.axes = args.axes_type
   
vp.verbose = not args.quiet
vp.sharecam = not args.no_camera_share

alpha = 1
leg = True
wire= False
if args.legend_off or nfiles == 1: leg = False
if args.wireframe: wire = True 
if args.scrolling_mode and args.sequence_mode:
    args.scrolling_mode = False
    
    
########################################################################
# special case of SLC/TIFF volumes with -g option
if args.ray_cast_mode or args.z_spacing or args.y_spacing:
    from vtkplotter.vtkio import _showVoxelImage
    wsize = 'auto'
    if args.full_screen: 
        wsize='full'    
    _showVoxelImage(vp, args)
    exit()
      
########################################################################
# normal mode for single file or sequence
elif (not args.scrolling_mode) or nfiles == 1:

    for i in range(N):
        f = args.files[i]
    
        if '.neutral' in f.lower() or '.xml' in f.lower() or '.gmsh' in f.lower(): 
            alpha = 0.1
            wire = True
        else:
            if not args.sequence_mode:
                alpha = 1/N
            wire = False
            
        if 0 < args.alpha <= 1: 
            alpha = args.alpha
            
        if args.wireframe: 
            wire = True 
    
        ic = 'gold'
        if args.color is not None : 
            if args.color.isdigit(): 
                ic = int(args.color)
            else:
                ic = args.color
        if args.show_scalars: 
            ic = None
        
        actor = vp.load(f, c=ic, alpha=alpha, wire=wire, legend=leg)
        
        if args.point_size > 0:
            try:
                ps = actor.GetProperty().GetPointSize()
                actor.GetProperty().SetPointSize(args.point_size)
                actor.GetProperty().SetRepresentationToPoints()
            except AttributeError:
                print('cannot set point size for', f)
        
        if args.sequence_mode: 
            vp.show(actor, at=i, interactive=False, zoom=args.zoom)
    
    if args.sequence_mode: 
        vp.interactor.Start()
    else:
        vp.show(interactive=True, zoom=args.zoom)
        
######################################################################## 
# scroll mode       
else:
    import numpy 

    def _scroll(key): #observer
        global _kact
        n = len(vp.actors)
        if key == 'Right' and _kact < n-1: 
            _kact += 1
        if key == 'Left'  and _kact > 0: 
            _kact -= 1
        
        step = int(n/5)
        if key == 'Up':
            _kact += step
            if _kact>n-1:_kact= n-1 
        if key == 'Down':
            _kact -= step
            if _kact<0: _kact= 0
        sliderRep.SetValue(_kact)
        vp.interactor.ExitCallback()
        
    if 0 < args.alpha <= 1: 
        alpha = args.alpha
    
    n = len(args.files)
    pb = ProgressBar(0, n)    
    
    for i,f in enumerate(args.files):            
        pb.print('..loading')
        ic = 'gold'
        if args.color is not None : 
            if args.color.isdigit(): 
                ic = int(args.color)
            else:
                ic = args.color
        if args.show_scalars: 
            ic = None
    
        actor = vp.load(f, c=ic, alpha=alpha, wire=wire, legend=leg)
        
        if args.point_size > 0:
            try:
                ps = actor.GetProperty().GetPointSize()
                actor.GetProperty().SetPointSize(args.point_size)
                actor.GetProperty().SetRepresentationToPoints()
            except AttributeError: 
                print('cannot set point size for', f)
    printc('Scrolling Mode', c='y', invert=1, end='')
    printc(', press:', c='y')
    printc('- Right and Left keys to move through files,', c='y')
    printc('- Up and Down keys to fast forward and backward.', c='y') 
    printc('- Esc to exit.', c='y') 

    vp.keyPressFunction = _scroll # key press observer

    vp.show(vp.actors[0], interactive=False, zoom=args.zoom)

    cb=(1,1,1)
    if numpy.sum(vp.renderer.GetBackground()) > 1.5:
        cb=(0.1, 0.1, 0.1)

    def sliderf(widget, event):
        global _kact
        _kact = int(widget.GetRepresentation().GetValue())
        widget.GetInteractor().ExitCallback()
        
    wid = vp.addSlider(sliderf, 0, n-1, pos=4, c=cb, showValue=False)
    sliderRep = wid.GetRepresentation()

    _kact=0
    while True:
        fn = args.files[_kact].split("/")[-1]
        printc('showing file #', _kact, '\t',fn,'\r', c='y', bold=0, end='')   
        vp.show(vp.actors[_kact], interactive=True, zoom=args.zoom)
    

